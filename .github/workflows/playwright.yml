name: Playwright Tests

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug mode"
        required: false
        type: boolean
        default: false

env:
  # Client-side variables
  NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: "test-maps-key"
  NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET: "test-preset"
  NEXT_PUBLIC_BASE_URL: "http://localhost:3000"

  # Server-side variables
  DATABASE_URL: "file:./test.db"
  TURSO_DATABASE_URL: "file:./test.db"
  TURSO_DATABASE_TOKEN: "test-token"
  NODE_ENV: "test"
  NEXTAUTH_SECRET: "test-secret"
  NEXTAUTH_URL: "http://localhost:3000"
  GOOGLE_CLIENT_ID: "mock-client-id"
  GOOGLE_CLIENT_SECRET: "mock-client-secret"
  AUTH_TOKEN: "test-auth-token"
  IG_USERNAME: "test-ig-user"
  IG_PASSWORD: "test-ig-pass"

jobs:
  test:
    name: Run Playwright Tests
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Create test env file
        run: |
          cat > .env.e2e << EOL
          # Client-side variables
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY="test-maps-key"
          NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET="test-preset"
          NEXT_PUBLIC_BASE_URL="http://localhost:3000"

          # Server-side variables
          DATABASE_URL="file:./test.db"
          TURSO_DATABASE_URL="file:./test.db"
          TURSO_DATABASE_TOKEN="test-token"
          NODE_ENV="test"
          NEXTAUTH_SECRET="test-secret"
          NEXTAUTH_URL="http://localhost:3000"
          GOOGLE_CLIENT_ID="mock-client-id"
          GOOGLE_CLIENT_SECRET="mock-client-secret"
          AUTH_TOKEN="test-auth-token"
          IG_USERNAME="test-ig-user"
          IG_PASSWORD="test-ig-pass"
          EOL

      - name: Setup test database for build
        run: |
          # Push schema to database
          npx prisma db push
          # Create test data for static paths
          node -e '
          const { PrismaClient } = require("@prisma/client");
          const prisma = new PrismaClient();
          async function seed() {
            await prisma.spot.create({
              data: {
                id: "test-spot",
                name: "Test Spot",
                city: "Test City",
                state: "TS",
                userId: "test-user-id",
                user: {
                  create: {
                    id: "test-user-id",
                    name: "Test User",
                    email: "test@example.com",
                  }
                }
              }
            });
          }
          seed().then(() => process.exit(0)).catch((e) => {
            console.error(e);
            process.exit(1);
          });
          '

      - name: Build Next.js app
        run: npm run build
        env:
          CI: true

      - name: Run Playwright tests
        env:
          DEBUG: ${{ inputs.debug && 'pw:api' || '' }}
          CI: true
        run: npx playwright test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
