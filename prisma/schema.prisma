generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Spot {
  id        String   @id @default(cuid())
  userId    String
  name      String
  city      String
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images    Image[]
  place     Place?
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  wings     Wing[]
}

model Place {
  id        String   @id
  name      String
  city      String
  state     String
  lat       Float
  lng       Float
  address   String?
  spotId    String   @unique
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wing {
  id          String           @id @default(cuid())
  userId      String
  spotId      String
  review      String
  rating      Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  images      Image[]
  spot        Spot             @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id], onDelete: Restrict)
  socialPosts WingSocialPost[]
}

model Image {
  id         String   @id @default(cuid())
  userId     String
  spotId     String
  wingId     String
  key        String
  type       String
  createdAt  DateTime @default(now())
  restaurant Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  wing       Wing     @relation(fields: [wingId], references: [id], onDelete: Cascade)
}

model WingSocialPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wingId    String
  type      String
  wing      Wing     @relation(fields: [wingId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  accounts      Account[]
  images        Image[]
  sessions      Session[]
  spots         Spot[]
  wings         Wing[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
