// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Spot {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String   @unique
  city      String
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wings     Wing[]
  images    Image[]
}

model Wing {
  id           String     @id @default(cuid())
  userId       String
  spotId String
  review       String
  rating       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  images       Image[]
  user         User       @relation(fields: [userId], references: [id])
  spot   Spot @relation(fields: [spotId], references: [id])
}

model Image {
  id           String     @id @default(cuid())
  userId       String
  spotId String
  wingId     String
  key          String
  type         String
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Spot @relation(fields: [spotId], references: [id])
  wing       Wing     @relation(fields: [wingId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  spots         Spot[]
  wings         Wing[]
  images        Image[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
